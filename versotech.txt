--Desafio 01

--Consulta de Funcionários: Escreva uma query para listar todos os funcionários ativos, mostrando as colunas id, nome, salario. Ordene o resultado pelo nome em ordem ascendente.

SELECT id_vendedor AS id, nome, salario
FROM VENDEDORES
WHERE inativo = FALSE
ORDER BY nome ASC;

--Desafio 02

/*Funcionários com Salário Acima da Média: Escreva uma query para listar os funcionários que possuem um salário acima da média salarial de todos os funcionários. A consulta deve mostrar as colunas id, nome, e salario, ordenadas pelo salario em ordem descendente.*/

SELECT id_vendedor AS id, nome, salario
FROM VENDEDORES
WHERE salario > (SELECT AVG(salario) FROM VENDEDORES)
ORDER BY salario DESC;

--Desafio 03

--Escreva uma query para listar todos os clientes e o valor total de pedidos já transmitidos. A consulta deve retornar as colunas id, razao_social, total, ordenadas pelo total em ordem descendente.

SELECT 
    c.id_cliente AS id, 
    c.razao_social, 
    COALESCE(SUM(p.valor_total), 0) AS total
FROM 
    CLIENTES c
LEFT JOIN 
    PEDIDO p ON c.id_cliente = p.id_cliente
GROUP BY 
    c.id_cliente, c.razao_social
ORDER BY 
    total DESC;


--fiz um LEFT JOIN entre as tabelas CLIENTES e PEDIDO e somei os valores totais dos pedidos para cada cliente. Coloquei o COALESCE para evitar que clientes sem pedidos apareçam com 0.

/* Desafio 04

Escreva uma query que retorne a situação atual de cada pedido da base. A consulta deve retornar as colunas id, valor, data e situacao. A situacao deve obedecer a seguinte regra:
Se possui data de cancelamento preenchido: CANCELADO
Se possui data de faturamento preenchido: FATURADO
Caso não possua data de cancelamento e nem faturamento: PENDENTE */

SELECT 
    id_pedido AS id,
    valor_total AS valor,
    data_emissao AS data,
    CASE
        WHEN data_cancelamento IS NOT NULL THEN 'CANCELADO'
        WHEN data_faturamento IS NOT NULL THEN 'FATURADO'
        ELSE 'PENDENTE'
    END AS situacao
FROM 
    PEDIDO;

/* Desafio 05

Produtos mais vendidos: Escreva uma query que retorne o produto mais vendido ( em quantidade ), incluindo o valor total vendido deste produto, quantidade de pedidos em que ele apareceu e para quantos clientes diferentes ele foi vendido. A consulta deve retornar as colunas id_produto, quantidade_vendida, total_vendido, clientes, pedidos. Caso haja empate em quantidade de vendas, utilizar o total vendido como critério de desempate. */

SELECT 
    ip.id_produto,
    SUM(ip.quantidade) AS quantidade_vendida,
    SUM(ip.quantidade * ip.preco_praticado) AS total_vendido,
    COUNT(DISTINCT p.id_cliente) AS clientes,
    COUNT(DISTINCT ip.id_pedido) AS pedidos
FROM 
    ITENS_PEDIDO ip
JOIN 
    PEDIDO p ON ip.id_pedido = p.id_pedido
GROUP BY 
    ip.id_produto
ORDER BY 
    quantidade_vendida DESC,
    total_vendido DESC
LIMIT 1;

Neste caso foi feito o join entre as tabelas ITENS_PEDIDO e PEDIDO para saber os clientes de cada pedido, agrupei os resultados por id_produto foi calculada a quantidade total vendida, o valor total vendido a quantidade de clientes distintos e a quantidade de pedidos distintos para cada produto. Ordenado pela quantidade vendida em ordem decrescente e em caso de empate pelo valor total vendido em ordem decrescente e utilizado o limit 1 para mostrar apenas o mais vendido.
